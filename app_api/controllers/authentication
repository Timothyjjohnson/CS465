const mongoose = require('mongoose');
const User = require('../models/user');
const jwt = require('jsonwebtoken');
const passport = require('passport');

const register = async (req, res) => {
  if (!req.body.name || !req.body.email || !req.body.password) {
    return res.status(400).json({ message: "All fields required" });
  }

  try {
    const existingUser = await User.findOne({ email: req.body.email });
    if (existingUser) {
      return res.status(409).json({ message: "Email already registered" });
    }

    const user = new User({
      name: req.body.name,
      email: req.body.email,
    });
    user.setPassword(req.body.password);

    await user.save();

    const token = user.generateJWT();
    return res.status(201).json({ token });
  } catch (err) {
    return res.status(500).json({ message: "Registration failed", error: err.message });
  }
};

const login = (req, res) => {
  if (!req.body.email || !req.body.password) {
    return res.status(400).json({ message: "All fields required" });
  }

  passport.authenticate('local', (err, user, info) => {
    if (err) {
      return res.status(404).json(err);
    }
    if (user) {
      const token = user.generateJWT();
      return res.status(200).json({ token });
    }
    return res.status(401).json(info);
  })(req, res);
};

// Method to authenticate our JWT
function authenticateJWT(req, res, next) {
  console.log('In Middleware');
  const authHeader = req.headers['authorization'];
  console.log('Auth Header: ' + authHeader);
  if (authHeader == null) {
    console.log('Auth Header Required but NOT PRESENT!');
    return res.sendStatus(401);
  }
  let headers = authHeader.split(' ');
  if (headers.length < 2) {
    console.log('Not enough tokens in Auth Header: ' + headers.length);
    return res.sendStatus(401);
  }
  const token = headers[1];
  console.log('Token: ' + token);
  if (token == null) {
    console.log('Null Bearer Token');
    return res.sendStatus(401);
  }
  console.log(process.env.JWT_SECRET);
  console.log(jwt.decode(token));

  jwt.verify(token, process.env.JWT_SECRET, (err, verified) => {
    if (err) {
      console.log('Token Validation Error!');
      return res.status(401).json({ message: 'Token Validation Error!' });
    }
    req.auth = verified;
    next();
  });
}

module.exports = {
  register,
  login,
  authenticateJWT,
};